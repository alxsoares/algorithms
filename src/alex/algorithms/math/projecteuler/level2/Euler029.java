package alex.algorithms.math.projecteuler.level2;

import java.math.BigInteger;
import java.util.Set;
import java.util.TreeSet;

/**
 * 
 Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 
 * 22=4, 23=8, 24=16, 25=32 32=9, 33=27, 34=81, 35=243 42=16, 43=64, 44=256,
 * 45=1024 52=25, 53=125, 54=625, 55=3125
 * 
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100
 * and 2 ≤ b ≤ 100?
 * 
 * 
 */
public class Euler029 {
	public static BigInteger power(int base, int exp) {
		BigInteger factor = BigInteger.valueOf(base);
		BigInteger res = BigInteger.ONE;
		while (exp > 0) {
			if ((exp & 1) != 0) {
				res = res.multiply(factor);
			}
			exp = exp >> 1;
			factor = factor.multiply(factor);
		}
		return res;
	}

	public static void main(String[] args) {
		Set<BigInteger> distinct = new TreeSet<BigInteger>();
		for(int a=2; a<=100;a++){
			for(int b=2; b<=100;b++){
				distinct.add(power(a, b));
			}
		}
		System.out.printf("%d\n", distinct.size());
	}

}
